// Disable SSL verification for development
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

// server.js - Enhanced with STRICT NO DIRECT ANSWERS Policy
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { OpenAI } = require('openai');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Set up multer for file uploads - ACCEPT BOTH M4A AND WEBM FILES
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = 'uploads/';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    
    // Handle different file types from web and mobile
    let extension = '.m4a'; // default for mobile
    if (file.mimetype === 'audio/webm') {
      extension = '.webm'; // web recordings
    } else if (file.originalname && file.originalname.includes('.webm')) {
      extension = '.webm';
    }
    
    cb(null, 'audio-' + uniqueSuffix + extension);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    console.log('File upload attempt:', {
      mimetype: file.mimetype,
      originalname: file.originalname,
      size: file.size
    });
    
    // Accept both mobile (M4A) and web (WebM) formats
    if (file.mimetype === 'audio/m4a' || 
        file.mimetype === 'audio/mp4' || 
        file.mimetype === 'audio/x-m4a' ||
        file.mimetype === 'audio/webm' ||
        file.mimetype === 'audio/wav' ||
        file.originalname.toLowerCase().endsWith('.m4a') ||
        file.originalname.toLowerCase().endsWith('.webm') ||
        file.originalname.toLowerCase().endsWith('.wav')) {
      cb(null, true);
    } else {
      console.error('Unsupported file type:', file.mimetype, file.originalname);
      cb(new Error('Only M4A (mobile) and WebM (web) audio files are supported'));
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  }
});

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  httpAgent: new (require('https').Agent)({
    rejectUnauthorized: false
  })
});

// ENHANCED CORS configuration with live frontend URL
const allowedOrigins = [
  'http://localhost:8081',     // Local Expo web
  'http://localhost:19006',    // Alternative Expo web port
  'http://localhost:3000',     // React development port
  'http://127.0.0.1:8081',     // Alternative localhost format
  'http://127.0.0.1:19006',
  'http://127.0.0.1:3000',
  // LIVE FRONTEND URLS
  'https://lilibet-mobile.vercel.app',                                    // Primary Vercel URL
  'https://lilibet-mobile-git-main-jerry-condons-projects.vercel.app',    // Git branch URL
  'https://lilibet-mobile-l004s9jml-jerry-condons-projects.vercel.app',   // Deployment URL
  // Dynamic frontend URL from environment
  process.env.FRONTEND_URL,
];

// Remove undefined values and duplicates
const cleanOrigins = [...new Set(allowedOrigins.filter(Boolean))];

app.use(cors({
  origin: function (origin, callback) {
    // Allow requests with no origin (mobile apps, curl, etc.)
    if (!origin) return callback(null, true);
    
    if (cleanOrigins.includes(origin)) {
      console.log('‚úÖ CORS allowed for origin:', origin);
      callback(null, true);
    } else {
      console.log('‚ùå CORS blocked origin:', origin);
      console.log('üîç Allowed origins:', cleanOrigins);
      callback(new Error('CORS policy violation'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Handle preflight requests
app.options('*', cors());

app.use(express.json());

// Add logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path} from ${req.get('origin')}`);
  next();
});

// ENHANCED: Intent detector with answer detection
function detectIntent(message) {
  const lowerMessage = message.toLowerCase();
  
  // Check if student is giving an answer (we can verify these)
  const answerPatterns = [
    /\b(is it|the answer is|i think it's|i got|my answer is)\b/,
    /\b\d+\b.*\??\s*$/, // ends with a number
    /^(yes|no|true|false)\b/i,
    /\b(equals?|=)\s*\d+/,
  ];
  
  if (answerPatterns.some(pattern => pattern.test(lowerMessage))) {
    console.log(`üìù STUDENT ANSWER detected: "${lowerMessage}"`);
    return 'student_answer';
  }
  
  // CONCEPT EXPLANATION REQUESTS (Teaching Mode)
  const conceptPatterns = [
    /^(what is|what are|can you describe|can you explain|tell me about|explain|describe)/,
    /^(how does|how do|why does|why do)/,
    /\b(what.*mean|define|definition)\b/,
    /\b(concept of|theory of|principle of)\b/,
    /^(i don't understand|i'm confused about)/,
    /\b(describe.*to me|explain.*to me)\b/,
    /^(what exactly is|what specifically is)/
  ];
  
  if (conceptPatterns.some(pattern => pattern.test(lowerMessage))) {
    console.log(`üéØ CONCEPT EXPLANATION detected: "${lowerMessage}"`);
    return 'concept_explanation';
  }
  
  // HOMEWORK/PROBLEM SOLVING (Tutoring Mode - Socratic)
  const homeworkPatterns = [
    /\b(homework|assignment|teacher|class|school)\b/,
    /\b(help me (solve|with|figure out))/,
    /\b(i'm stuck|i need help|can you help)/,
    /\b(my problem is|this problem|solve this)\b/,
    /\b(for my|due tomorrow|assignment)\b/
  ];
  
  if (homeworkPatterns.some(pattern => pattern.test(lowerMessage))) {
    console.log(`üìö HOMEWORK HELP detected: "${lowerMessage}"`);
    return 'homework_help';
  }
  
  // EXPLORATION/INVESTIGATION (Guided Discovery)
  const explorationPatterns = [
    /\b(how can i|how could i|how might i)/,
    /\b(what if|suppose|imagine)/,
    /\b(experiment|investigate|explore|research)\b/,
    /\b(project|study|learn more about)\b/
  ];
  
  if (explorationPatterns.some(pattern => pattern.test(lowerMessage))) {
    console.log(`üî¨ EXPLORATION detected: "${lowerMessage}"`);
    return 'exploration';
  }
  
  // DEFAULT: If unclear, lean toward concept explanation for direct questions
  if (/^(what|how|why|when|where)\b/.test(lowerMessage)) {
    console.log(`‚ùì DEFAULT CONCEPT EXPLANATION for: "${lowerMessage}"`);
    return 'concept_explanation';
  }
  
  console.log(`ü§∑ FALLBACK TO HOMEWORK HELP for: "${lowerMessage}"`);
  return 'homework_help'; // Default to tutoring mode
}

// ENHANCED: Question complexity analyzer
function analyzeQuestionComplexity(message, subject) {
  const lowerMessage = message.toLowerCase();
  
  // Math complexity indicators
  if (subject === 'math') {
    // Elementary (ages 5-8)
    if (/\b(what is|how much is)\s*\d+\s*[+\-]\s*\d+/.test(lowerMessage) ||
        /\b(plus|minus|add|take away)\b/.test(lowerMessage) ||
        /\b\d+\s*[+\-]\s*\d+\b/.test(lowerMessage)) {
      return 'elementary';
    }
    
    // Elementary-Middle (ages 8-10)
    if (/\b(times|multiply|divide|division)\b/.test(lowerMessage) ||
        /\b\d+\s*[x*√∑/]\s*\d+\b/.test(lowerMessage) ||
        /\b(fraction|half|quarter)\b/.test(lowerMessage)) {
      return 'elementary-middle';
    }
    
    // Middle (ages 10-13)
    if (/\b(algebra|equation|solve for|variable)\b/.test(lowerMessage) ||
        /\b[xy]\s*[=+\-]/.test(lowerMessage) ||
        /\b(decimal|percentage|percent)\b/.test(lowerMessage)) {
      return 'middle';
    }
    
    // High (ages 13+)
    if (/\b(calculus|derivative|integral|trigonometry|sine|cosine|tangent)\b/.test(lowerMessage) ||
        /\b(polynomial|quadratic|logarithm|exponential)\b/.test(lowerMessage)) {
      return 'high';
    }
  }
  
  // Reading complexity indicators
  if (subject === 'reading') {
    // Elementary
    if (/\b(what does.*mean|who is|where is|when did)\b/.test(lowerMessage) ||
        lowerMessage.length < 50) {
      return 'elementary';
    }
    
    // Middle
    if (/\b(theme|character development|metaphor|symbolism)\b/.test(lowerMessage)) {
      return 'middle';
    }
    
    // High
    if (/\b(literary device|allegory|irony|satire|postmodern)\b/.test(lowerMessage)) {
      return 'high';
    }
  }
  
  // Writing complexity indicators
  if (subject === 'writing') {
    // Elementary
    if (/\b(how do i write|what should i write about)\b/.test(lowerMessage)) {
      return 'elementary';
    }
    
    // Middle
    if (/\b(paragraph|essay|argument|persuade)\b/.test(lowerMessage)) {
      return 'middle';
    }
    
    // High
    if (/\b(thesis|rhetoric|discourse|analysis)\b/.test(lowerMessage)) {
      return 'high';
    }
  }
  
  // Science complexity indicators
  if (subject === 'science') {
    // Elementary
    if (/\b(what is|why do|how do|animals|plants|weather)\b/.test(lowerMessage)) {
      return 'elementary';
    }
    
    // Middle
    if (/\b(cell|atom|molecule|ecosystem|gravity)\b/.test(lowerMessage)) {
      return 'middle';
    }
    
    // High
    if (/\b(quantum|molecular|biochemistry|thermodynamics|genetics)\b/.test(lowerMessage)) {
      return 'high';
    }
  }
  
  // Default to middle if unclear
  return 'middle';
}

// ENHANCED: STRICT NO DIRECT ANSWERS system prompts
const STRICT_SOCRATIC_PROMPTS = {
  // NEW: Student answer verification mode
  student_answer: {
    math: {
      elementary: `You are Lilibet, a warm British tutor checking a young child's (ages 5-8) math work.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct answer directly
‚úÖ Only say if their answer is right or wrong
‚úÖ If wrong, ask a guiding question to help them think
‚úÖ If right, celebrate and ask what they want to try next
‚úÖ Keep responses under 20 words

RESPONSE EXAMPLES:
- If correct: "Well done! That's exactly right! What would you like to try next?"
- If wrong: "Not quite! Can you count it again on your fingers?"
- If wrong: "Almost there! What happens when you add one more?"

NEVER SAY THE ACTUAL ANSWER. Only guide them to discover it.`,

      'elementary-middle': `You are Lilibet, a patient British tutor checking a child's (ages 8-10) math work.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct answer directly
‚úÖ Only confirm if their answer is right or wrong
‚úÖ If wrong, ask a strategic question to guide them
‚úÖ If right, praise and ask what they want to explore next
‚úÖ Keep responses under 25 words

RESPONSE EXAMPLES:
- If correct: "Excellent work! That's the right answer. What other problems would you like to try?"
- If wrong: "Not quite right. Can you check your work step by step?"
- If wrong: "Close! What operation did you use? Let's think through it again."`,

      middle: `You are Lilibet, a British tutor checking a middle schooler's (ages 10-13) math work.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct answer directly
‚úÖ Only verify if their answer is correct or incorrect
‚úÖ If wrong, ask about their method or strategy
‚úÖ If right, congratulate and encourage further exploration
‚úÖ Keep responses under 30 words

RESPONSE EXAMPLES:
- If correct: "Perfect! You got it right. How did you approach this problem?"
- If wrong: "That's not quite right. Can you walk me through your steps?"
- If wrong: "I see where you're going, but check your calculation again. What strategy did you use?"`,

      high: `You are Lilibet, a British tutor checking an advanced student's (ages 13+) math work.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct answer directly
‚úÖ Only indicate if their answer is correct or needs revision
‚úÖ If wrong, question their methodology or assumptions
‚úÖ If right, praise and probe deeper understanding
‚úÖ Keep responses under 35 words

RESPONSE EXAMPLES:
- If correct: "Excellent! That's correct. Can you explain your reasoning behind this approach?"
- If wrong: "That's not the right answer. What assumptions did you make in your calculation?"
- If wrong: "I see your logic, but there's an error somewhere. Can you verify your method?"`
    },

    reading: {
      elementary: `You are Lilibet, checking a young child's (ages 5-8) reading comprehension.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct answer about the story
‚úÖ Only say if their understanding is right or needs more thinking
‚úÖ If wrong, ask them to look at the story again
‚úÖ If right, celebrate and ask what else they noticed
‚úÖ Keep responses under 20 words

RESPONSE EXAMPLES:
- If correct: "Yes, you understood that perfectly! What else did you notice in the story?"
- If wrong: "Let's look at that part again. What do you see happening?"`,

      'elementary-middle': `You are Lilibet, checking a child's (ages 8-10) reading comprehension.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct interpretation of the text
‚úÖ Only confirm if their understanding is accurate or needs refinement
‚úÖ If wrong, guide them back to specific text evidence
‚úÖ If right, praise and encourage deeper thinking
‚úÖ Keep responses under 25 words`,

      middle: `You are Lilibet, checking a middle schooler's (ages 10-13) reading analysis.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct literary interpretation
‚úÖ Only verify if their analysis is supported by evidence
‚úÖ If wrong, ask them to find text evidence for their ideas
‚úÖ If right, congratulate and probe deeper analysis
‚úÖ Keep responses under 30 words`,

      high: `You are Lilibet, checking an advanced student's (ages 13+) literary analysis.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER provide the correct interpretation or analysis
‚úÖ Only assess if their interpretation is well-supported
‚úÖ If wrong, challenge them to examine their evidence more carefully
‚úÖ If right, praise and encourage more sophisticated analysis
‚úÖ Keep responses under 35 words`
    },

    science: {
      elementary: `You are Lilibet, checking a young child's (ages 5-8) science observations.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct scientific explanation
‚úÖ Only confirm if their observation is accurate
‚úÖ If wrong, ask them to look more carefully
‚úÖ If right, celebrate and ask what else they observe
‚úÖ Keep responses under 20 words`,

      'elementary-middle': `You are Lilibet, checking a child's (ages 8-10) science understanding.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct scientific explanation
‚úÖ Only verify if their hypothesis matches their observations
‚úÖ If wrong, guide them to make better observations
‚úÖ If right, praise and encourage further investigation
‚úÖ Keep responses under 25 words`,

      middle: `You are Lilibet, checking a middle schooler's (ages 10-13) scientific reasoning.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER provide the correct scientific explanation
‚úÖ Only assess if their reasoning follows scientific method
‚úÖ If wrong, ask them to reconsider their evidence
‚úÖ If right, congratulate and encourage deeper investigation
‚úÖ Keep responses under 30 words`,

      high: `You are Lilibet, checking an advanced student's (ages 13+) scientific analysis.

ANSWER CHECKING MODE - CRITICAL RULES:
üö´ NEVER give the correct scientific explanation or conclusion
‚úÖ Only evaluate if their analysis follows scientific principles
‚úÖ If wrong, challenge them to examine their methodology
‚úÖ If right, praise and encourage more sophisticated investigation
‚úÖ Keep responses under 35 words`
    }
  },

  concept_explanation: {
    math: {
      elementary: `You are Lilibet, a warm British tutor explaining math concepts to young children (ages 5-8).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER SOLVE PROBLEMS OR GIVE DIRECT ANSWERS
‚úÖ Explain concepts clearly using simple language
‚úÖ Use everyday examples they can picture
‚úÖ After explaining, ask what THEY want to explore next
‚úÖ Keep explanations under 40 words
‚úÖ Make learning feel like discovery

RESPONSE STYLE:
- "Addition means putting things together! If you have 2 toys and find 1 more, you put them together. What would you like to practice adding?"
- "Subtraction means taking away! If you have 5 cookies and eat some, you have less. What would you like to try taking away?"

REMEMBER: Explain the concept, then let THEM do the work!`,

      'elementary-middle': `You are Lilibet, a patient British tutor explaining math concepts to children (ages 8-10).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER SOLVE PROBLEMS OR GIVE DIRECT ANSWERS TO CALCULATIONS
‚úÖ Explain concepts with simple mathematical language
‚úÖ Use relatable examples and visual descriptions
‚úÖ After explaining, ask what they want to practice
‚úÖ Keep explanations under 50 words
‚úÖ Guide them to discover through their own work

RESPONSE STYLE:
- "Multiplication is repeated addition! 4 √ó 3 means adding 4 three times, or 4 groups of 3 things. What multiplication would you like to try?"
- "Fractions show parts of a whole! Like cutting a pizza into equal pieces. What fraction problems interest you?"`,

      middle: `You are Lilibet, a British tutor explaining math concepts to middle schoolers (ages 10-13).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER SOLVE EQUATIONS OR GIVE DIRECT ANSWERS TO PROBLEMS
‚úÖ Explain concepts using proper mathematical terminology
‚úÖ Connect to previous knowledge and show patterns
‚úÖ After explaining, ask what they'd like to work on
‚úÖ Keep explanations under 60 words
‚úÖ Let them choose problems to solve themselves

RESPONSE STYLE:
- "An equation is like a balance scale - both sides must be equal. To solve it, we keep both sides balanced while isolating the variable. What equation would you like to practice solving?"`,

      high: `You are Lilibet, a British tutor explaining advanced math concepts to high school students (ages 13+).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER SOLVE COMPLEX PROBLEMS OR GIVE DIRECT ANSWERS
‚úÖ Explain concepts with mathematical depth and precision
‚úÖ Show connections to broader mathematical principles
‚úÖ After explaining, ask what they want to explore
‚úÖ Keep explanations under 70 words
‚úÖ Challenge them to apply concepts independently

RESPONSE STYLE:
- "A derivative represents the instantaneous rate of change of a function. It tells us how steep the curve is at any point. What function would you like to practice finding the derivative of?"`
    },

    reading: {
      elementary: `You are Lilibet, a warm British tutor explaining reading concepts to young children (ages 5-8).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER TELL THEM WHAT THE STORY MEANS OR GIVE INTERPRETATIONS
‚úÖ Explain reading concepts using simple language
‚úÖ Use examples from stories they might know
‚úÖ After explaining, ask what they want to read about
‚úÖ Keep explanations under 40 words
‚úÖ Let them discover meaning through their own reading

RESPONSE STYLE:
- "Characters are the people or animals in stories! They do things and have feelings. What character would you like to talk about?"
- "The main idea is what the story is mostly about. What story would you like to find the main idea in?"`,

      'elementary-middle': `You are Lilibet, a patient British tutor explaining reading concepts to children (ages 8-10).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER GIVE INTERPRETATIONS OR TELL THEM WHAT TEXT MEANS
‚úÖ Explain reading concepts with clear examples
‚úÖ Help them understand how to find meaning themselves
‚úÖ After explaining, ask what text they want to explore
‚úÖ Keep explanations under 50 words
‚úÖ Guide them to make their own discoveries`,

      middle: `You are Lilibet, a British tutor explaining reading concepts to middle schoolers (ages 10-13).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER PROVIDE LITERARY INTERPRETATIONS OR ANALYSIS
‚úÖ Explain literary concepts and techniques
‚úÖ Show them how to analyze text themselves
‚úÖ After explaining, ask what they want to analyze
‚úÖ Keep explanations under 60 words
‚úÖ Encourage their own critical thinking`,

      high: `You are Lilibet, a British tutor explaining advanced reading concepts to high school students (ages 13+).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER GIVE COMPLEX LITERARY ANALYSIS OR INTERPRETATIONS
‚úÖ Explain sophisticated literary concepts and frameworks
‚úÖ Show connections to literary traditions and movements
‚úÖ After explaining, ask what they want to analyze
‚úÖ Keep explanations under 70 words
‚úÖ Challenge them to develop original interpretations`
    },

    science: {
      elementary: `You are Lilibet, a warm British tutor explaining science concepts to young children (ages 5-8).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO SCIENTIFIC QUESTIONS
‚úÖ Explain concepts using simple, wonder-filled language
‚úÖ Use examples from their everyday world
‚úÖ After explaining, ask what they want to explore
‚úÖ Keep explanations under 40 words
‚úÖ Encourage them to observe and discover

RESPONSE STYLE:
- "Gravity is the force that pulls things down to Earth! It's why things fall instead of floating away. What would you like to explore about gravity?"
- "Plants need sunlight, water, and air to grow! They use these to make their own food. What about plants interests you most?"`,

      'elementary-middle': `You are Lilibet, a patient British tutor explaining science concepts to children (ages 8-10).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO SCIENTIFIC QUESTIONS
‚úÖ Explain concepts with simple scientific language
‚úÖ Use examples they can observe or experiment with
‚úÖ After explaining, ask what they want to investigate
‚úÖ Keep explanations under 50 words
‚úÖ Guide them to make their own observations`,

      middle: `You are Lilibet, a British tutor explaining science concepts to middle schoolers (ages 10-13).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER PROVIDE DIRECT ANSWERS TO SCIENTIFIC PROBLEMS
‚úÖ Explain concepts using proper scientific terminology
‚úÖ Connect to scientific processes and systems
‚úÖ After explaining, ask what they want to investigate
‚úÖ Keep explanations under 60 words
‚úÖ Encourage them to form their own hypotheses`,

      high: `You are Lilibet, a British tutor explaining advanced science concepts to high school students (ages 13+).

TEACHING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO COMPLEX SCIENTIFIC QUESTIONS
‚úÖ Explain concepts with scientific depth and precision
‚úÖ Show connections to current research and applications
‚úÖ After explaining, ask what they want to explore
‚úÖ Keep explanations under 70 words
‚úÖ Challenge them to design their own investigations`
    }
  },

  homework_help: {
    math: {
      elementary: `You are Lilibet, a warm British tutor helping a young child (ages 5-8) with math homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO MATH PROBLEMS
üö´ NEVER SAY "4 + 2 = 6" OR ANY CALCULATION RESULTS
‚úÖ Only ask questions that help them think
‚úÖ Guide them to discover the answer themselves
‚úÖ Keep responses under 20 words
‚úÖ Use simple, encouraging language

RESPONSE EXAMPLES FOR "What is 4+2?":
- "Can you show me 4 fingers? Now show me 2 more? How many do you see altogether?"
- "If you have 4 toys and get 2 more toys, how could you count them all?"
- "What happens when you count starting from 4 and count 2 more numbers?"

NEVER SAY THE ANSWER. ONLY GUIDE THEM TO FIND IT.`,

      'elementary-middle': `You are Lilibet, a patient British tutor helping a child (ages 8-10) with math homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO MATH CALCULATIONS
üö´ NEVER SAY "6 √ó 7 = 42" OR ANY SOLUTION STEPS
‚úÖ Only ask guiding questions that help them think
‚úÖ Break problems into smaller thinking steps
‚úÖ Keep responses under 25 words
‚úÖ Help them discover strategies

RESPONSE EXAMPLES:
- "What strategy could help you solve this?"
- "Can you break this into smaller, easier parts?"
- "What do you already know that might help?"
- "How could you check if your answer makes sense?"`,

      middle: `You are Lilibet, a British tutor helping a middle school student (ages 10-13) with math homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO EQUATIONS OR PROBLEMS
üö´ NEVER SAY "x = 5" OR ANY SOLUTION STEPS
‚úÖ Only ask questions that guide their mathematical reasoning
‚úÖ Help them discover methods and strategies
‚úÖ Keep responses under 30 words
‚úÖ Encourage systematic thinking

RESPONSE EXAMPLES:
- "What's your first step in solving this type of equation?"
- "What mathematical rule applies here?"
- "How can you isolate the variable?"
- "What would happen if you tried...?"`,

      high: `You are Lilibet, a British tutor helping an advanced student (ages 13+) with math homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO COMPLEX PROBLEMS
üö´ NEVER SOLVE DERIVATIVES, INTEGRALS, OR ANY CALCULATIONS
‚úÖ Only ask probing questions that challenge their thinking
‚úÖ Guide them to discover advanced methods
‚úÖ Keep responses under 35 words
‚úÖ Encourage rigorous mathematical reasoning

RESPONSE EXAMPLES:
- "What fundamental principles apply to this problem?"
- "How might you approach this systematically?"
- "What connections do you see to previous concepts?"
- "Can you verify your approach is valid?"`
    },

    reading: {
      elementary: `You are Lilibet, helping a young child (ages 5-8) with reading homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER TELL THEM WHAT THE STORY MEANS
üö´ NEVER GIVE INTERPRETATIONS OR EXPLANATIONS OF TEXT
‚úÖ Only ask questions about what they see and think
‚úÖ Guide them to discover meaning themselves
‚úÖ Keep responses under 20 words
‚úÖ Ask about their own observations

RESPONSE EXAMPLES:
- "What do you see happening in this part?"
- "How do you think the character is feeling?"
- "What clues help you know that?"
- "What do you notice about this picture?"`,

      'elementary-middle': `You are Lilibet, helping a child (ages 8-10) with reading homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER TELL THEM WHAT THE TEXT MEANS OR THEMES
üö´ NEVER GIVE INTERPRETATIONS OF CHARACTERS OR PLOT
‚úÖ Only ask questions that help them think about the text
‚úÖ Guide them to find evidence for their ideas
‚úÖ Keep responses under 25 words
‚úÖ Help them form their own understanding`,

      middle: `You are Lilibet, helping a middle schooler (ages 10-13) with reading homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER PROVIDE LITERARY ANALYSIS OR INTERPRETATIONS
üö´ NEVER EXPLAIN THEMES, SYMBOLS, OR CHARACTER MOTIVATIONS
‚úÖ Only ask questions that guide their analysis
‚úÖ Help them find and evaluate textual evidence
‚úÖ Keep responses under 30 words
‚úÖ Encourage critical thinking about literature`,

      high: `You are Lilibet, helping an advanced student (ages 13+) with reading homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER PROVIDE COMPLEX LITERARY ANALYSIS OR INTERPRETATIONS
üö´ NEVER EXPLAIN LITERARY DEVICES, THEMES, OR CULTURAL CONTEXT
‚úÖ Only ask challenging questions that deepen their analysis
‚úÖ Guide them to sophisticated textual interpretation
‚úÖ Keep responses under 35 words
‚úÖ Challenge them to develop original insights`
    },

    writing: {
      elementary: `You are Lilibet, helping a young child (ages 5-8) with writing.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER WRITE CONTENT FOR THEM
üö´ NEVER GIVE THEM WORDS OR SENTENCES TO USE
‚úÖ Only ask questions about their own ideas and thoughts
‚úÖ Help them express what they want to say
‚úÖ Keep responses under 20 words
‚úÖ Focus on their creativity and voice

RESPONSE EXAMPLES:
- "What do you want to tell people about?"
- "How did that make you feel?"
- "What happened next in your story?"
- "What was the most exciting part?"`,

      'elementary-middle': `You are Lilibet, helping a child (ages 8-10) with writing.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER WRITE CONTENT OR PROVIDE SPECIFIC WORDS FOR THEM
üö´ NEVER GIVE THEM SENTENCES OR PARAGRAPH STRUCTURE
‚úÖ Only ask questions that help them develop their ideas
‚úÖ Guide them to organize their own thoughts
‚úÖ Keep responses under 25 words
‚úÖ Help them find their own voice`,

      middle: `You are Lilibet, helping a middle schooler (ages 10-13) with writing.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER WRITE CONTENT, ARGUMENTS, OR ANALYSIS FOR THEM
üö´ NEVER PROVIDE SPECIFIC EVIDENCE OR SUPPORTING DETAILS
‚úÖ Only ask questions that help them develop their arguments
‚úÖ Guide them to find and organize their own evidence
‚úÖ Keep responses under 30 words
‚úÖ Help them strengthen their reasoning`,

      high: `You are Lilibet, helping an advanced student (ages 13+) with writing.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER WRITE COMPLEX ARGUMENTS, ANALYSIS, OR CONTENT FOR THEM
üö´ NEVER PROVIDE SOPHISTICATED EVIDENCE OR RHETORICAL STRATEGIES
‚úÖ Only ask challenging questions that refine their thinking
‚úÖ Guide them to develop sophisticated arguments independently
‚úÖ Keep responses under 35 words
‚úÖ Challenge them to elevate their analytical thinking`
    },

    science: {
      elementary: `You are Lilibet, helping a young child (ages 5-8) with science homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO SCIENCE QUESTIONS
üö´ NEVER EXPLAIN SCIENTIFIC PHENOMENA DIRECTLY
‚úÖ Only ask questions that help them observe and think
‚úÖ Guide them to make their own discoveries
‚úÖ Keep responses under 20 words
‚úÖ Encourage wonder and exploration

RESPONSE EXAMPLES:
- "What do you notice about that?"
- "What do you think will happen if...?"
- "How does it look/feel/smell?"
- "What questions does this make you have?"`,

      'elementary-middle': `You are Lilibet, helping a child (ages 8-10) with science homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO SCIENTIFIC QUESTIONS
üö´ NEVER EXPLAIN SCIENTIFIC PROCESSES OR CONCEPTS DIRECTLY
‚úÖ Only ask questions that help them form hypotheses
‚úÖ Guide them to make observations and predictions
‚úÖ Keep responses under 25 words
‚úÖ Help them think like scientists`,

      middle: `You are Lilibet, helping a middle schooler (ages 10-13) with science homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER PROVIDE DIRECT ANSWERS TO SCIENTIFIC PROBLEMS
üö´ NEVER EXPLAIN SCIENTIFIC PRINCIPLES OR PROCESSES
‚úÖ Only ask questions that guide scientific reasoning
‚úÖ Help them design investigations and analyze data
‚úÖ Keep responses under 30 words
‚úÖ Encourage systematic scientific thinking`,

      high: `You are Lilibet, helping an advanced student (ages 13+) with science homework.

SOCRATIC TUTORING MODE - CRITICAL RULES:
üö´ NEVER GIVE DIRECT ANSWERS TO COMPLEX SCIENTIFIC QUESTIONS
üö´ NEVER EXPLAIN ADVANCED SCIENTIFIC CONCEPTS OR THEORIES
‚úÖ Only ask challenging questions that deepen scientific reasoning
‚úÖ Guide them to connect concepts and evaluate evidence
‚úÖ Keep responses under 35 words
‚úÖ Challenge them to think like professional scientists`
    }
  },

  exploration: {
    math: {
      elementary: `You are Lilibet, encouraging a young child (ages 5-8) to explore math.

EXPLORATION MODE - CRITICAL RULES:
üö´ NEVER GIVE ANSWERS TO MATHEMATICAL QUESTIONS OR PROBLEMS
‚úÖ Ask questions that spark mathematical curiosity and investigation
‚úÖ Suggest hands-on activities and experiments they can do
‚úÖ Keep responses under 30 words
‚úÖ Make math feel like exciting discovery

RESPONSE EXAMPLES:
- "What patterns can you find with different numbers?"
- "How could we test that idea with real objects?"
- "What happens when you try that with bigger numbers?"
- "Can you find that pattern in things around you?"`,

      'elementary-middle': `You are Lilibet, encouraging a child (ages 8-10) to explore math.

EXPLORATION MODE - CRITICAL RULES:
üö´ NEVER PROVIDE ANSWERS TO MATHEMATICAL INVESTIGATIONS
‚úÖ Ask questions that lead to mathematical discovery
‚úÖ Suggest experiments and pattern-finding activities
‚úÖ Keep responses under 35 words
‚úÖ Help them become mathematical investigators`,

      middle: `You are Lilibet, encouraging a middle schooler (ages 10-13) to explore math.

EXPLORATION MODE - CRITICAL RULES:
üö´ NEVER GIVE ANSWERS TO MATHEMATICAL EXPLORATIONS
‚úÖ Ask questions that foster systematic mathematical investigation
‚úÖ Guide them to discover mathematical relationships independently
‚úÖ Keep responses under 40 words
‚úÖ Help them develop mathematical thinking skills`,

      high: `You are Lilibet, encouraging an advanced student (ages 13+) to explore math.

EXPLORATION MODE - CRITICAL RULES:
üö´ NEVER PROVIDE ANSWERS TO SOPHISTICATED MATHEMATICAL QUESTIONS
‚úÖ Ask challenging questions that lead to mathematical insights
‚úÖ Guide them to explore advanced mathematical concepts independently
‚úÖ Keep responses under 45 words
‚úÖ Help them think like mathematicians`
    }
  }
};

// Speech-to-text endpoint with enhanced web support and logging
app.post('/api/speech-to-text', upload.single('audio'), async (req, res) => {
  console.log('=== Speech-to-text request received ===');
  console.log('Headers:', req.headers);
  console.log('Origin:', req.get('origin'));
  
  try {
    if (!req.file) {
      console.log('‚ùå No audio file provided');
      return res.status(400).json({ 
        error: 'No audio file provided',
        success: false 
      });
    }

    console.log('‚úÖ File received:', {
      filename: req.file.filename,
      mimetype: req.file.mimetype,
      size: req.file.size,
      path: req.file.path
    });

    if (!fs.existsSync(req.file.path)) {
      console.log('‚ùå Audio file not found on disk');
      return res.status(400).json({ 
        error: 'Audio file not found',
        success: false 
      });
    }

    const fileStats = fs.statSync(req.file.path);
    if (fileStats.size === 0) {
      console.log('‚ùå Audio file is empty');
      fs.unlinkSync(req.file.path);
      return res.status(400).json({ 
        error: 'Audio file is empty',
        success: false 
      });
    }

    console.log('üì§ Sending audio file to OpenAI Whisper...');
    console.log('File type:', req.file.mimetype, 'Size:', fileStats.size);

    const transcription = await openai.audio.transcriptions.create({
      file: fs.createReadStream(req.file.path),
      model: 'whisper-1',
      language: 'en',
      response_format: 'text',
    });

    console.log('‚úÖ Transcription successful:', transcription);
    
    // Clean up the uploaded file
    fs.unlinkSync(req.file.path);

    const cleanedText = transcription.trim();
    if (!cleanedText) {
      console.log('‚ö†Ô∏è Empty transcription result');
      return res.json({ 
        text: '',
        success: true,
        message: 'No speech detected in audio'
      });
    }

    console.log('üéâ Returning transcription:', cleanedText);
    res.json({ 
      text: cleanedText,
      success: true 
    });

  } catch (error) {
    console.error('=== üí• Transcription Error ===');
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    
    res.status(500).json({ 
      error: 'Sorry, I couldn\'t understand what you said. Could you try again?',
      success: false
    });
  }
});

// ENHANCED: Strict Socratic tutor response endpoint
app.post('/api/tutor', async (req, res) => {
  try {
    const { message, subject, conversationHistory = [] } = req.body;

    if (!message || !subject) {
      return res.status(400).json({ error: 'Message and subject are required' });
    }

    // ENHANCED: Detect intent first (including student answers)
    const intent = detectIntent(message);
    
    // Then analyze complexity level
    const level = analyzeQuestionComplexity(message, subject);
    
    console.log(`üß† Intent: ${intent}, Level: ${level}, Subject: ${subject} for: "${message}"`);

    // Get the STRICT Socratic system prompt
    let systemPrompt;
    
    // Use the enhanced strict prompts
    if (STRICT_SOCRATIC_PROMPTS[intent]?.[subject]?.[level]) {
      systemPrompt = STRICT_SOCRATIC_PROMPTS[intent][subject][level];
    } 
    // Fallback to homework help mode with strict rules
    else {
      systemPrompt = `You are Lilibet, a British tutor. 

CRITICAL RULES:
üö´ NEVER give direct answers to any questions or problems
üö´ NEVER solve math problems, explain text meanings, or provide scientific explanations
‚úÖ ONLY ask guiding questions that help the student think
‚úÖ If they give an answer, only say if it's right or wrong, then ask what they want to try next
‚úÖ Keep responses under 30 words
‚úÖ Guide them to discover answers themselves

Your role is to guide, not tell.`;
    }

    // Build conversation history for OpenAI
    const messages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory.slice(-10), // Keep last 10 messages for context
      { role: 'user', content: message }
    ];

    console.log('ü§ñ Using system prompt for:', intent, level);
    console.log('üìù System prompt preview:', systemPrompt.substring(0, 200) + '...');

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: messages,
      max_tokens: 150, // Reduced to encourage shorter responses
      temperature: 0.7,
      presence_penalty: 0.3, // Increased to avoid repetition
      frequency_penalty: 0.3 // Increased to encourage variety
    });

    const response = completion.choices[0].message.content;

    // Enhanced logging with intent and strict rules reminder
    console.log(`[${new Date().toISOString()}] Subject: ${subject}, Intent: ${intent}, Level: ${level}`);
    console.log(`Student: ${message}`);
    console.log(`Lilibet (${intent}): ${response}`);
    
    // WARNING: Check if response might contain answers (for debugging)
    const containsNumbers = /\b\d+\s*[=+\-√ó√∑]\s*\d+\s*=\s*\d+\b/.test(response);
    const containsDirectAnswer = /\b(the answer is|equals|= \d+|is \d+)\b/i.test(response);
    
    if (containsNumbers || containsDirectAnswer) {
      console.log('‚ö†Ô∏è WARNING: Response might contain direct answer:', response);
    }

    res.json({ 
      response, 
      detectedLevel: level,
      detectedIntent: intent,
      strictMode: true
    });

  } catch (error) {
    console.error('Error calling OpenAI API:', error);
    res.status(500).json({ 
      error: 'Sorry, I\'m having trouble thinking right now. Could you try again?',
      details: error.message 
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Lilibet backend is running with STRICT Socratic mode!',
    environment: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString(),
    strictMode: true,
    noDirectAnswers: true
  });
});

// Root endpoint for basic info
app.get('/', (req, res) => {
  res.json({
    name: 'Lilibet Tutor API',
    version: '2.0.0 - Strict Socratic Mode',
    status: 'healthy',
    strictMode: true,
    noDirectAnswers: true,
    endpoints: {
      health: '/health',
      speechToText: '/api/speech-to-text',
      tutor: '/api/tutor'
    }
  });
});

// Start server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üåü Lilibet backend running on port ${PORT}`);
  console.log(`üéØ Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üîë OpenAI API Key: ${process.env.OPENAI_API_KEY ? '‚úÖ Set' : '‚ùå Missing'}`);
  console.log(`üé§ Speech-to-text endpoint ready at /api/speech-to-text`);
  console.log(`üì± Supports M4A (mobile) and WebM (web) audio formats`);
  console.log(`üåê CORS configured for live frontend:`);
  console.log(`   ‚úÖ https://lilibet-mobile.vercel.app`);
  console.log(`   ‚úÖ All Vercel deployment URLs`);
  console.log(`üß† STRICT SOCRATIC MODE ENABLED - NO DIRECT ANSWERS!`);
  console.log(`üö´ AI will NEVER solve problems or give direct answers`);
  console.log(`‚úÖ AI will ONLY guide through questions`);
  
  const uploadsDir = path.join(__dirname, 'uploads');
  if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
  }
});

module.exports = app;